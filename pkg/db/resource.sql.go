// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: resource.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addResourceRole = `-- name: AddResourceRole :exec
INSERT INTO resource_to_role(resource_uuid, role_uuid) 
VALUES ($1, $2)
`

type AddResourceRoleParams struct {
	ResourceUuid uuid.UUID `json:"resource_uuid"`
	RoleUuid     uuid.UUID `json:"role_uuid"`
}

func (q *Queries) AddResourceRole(ctx context.Context, arg AddResourceRoleParams) error {
	_, err := q.db.Exec(ctx, addResourceRole, arg.ResourceUuid, arg.RoleUuid)
	return err
}

const createResource = `-- name: CreateResource :one
INSERT INTO resource(content)
VALUES ($1)
RETURNING resource_uuid, content
`

func (q *Queries) CreateResource(ctx context.Context, content string) (Resource, error) {
	row := q.db.QueryRow(ctx, createResource, content)
	var i Resource
	err := row.Scan(&i.ResourceUuid, &i.Content)
	return i, err
}

const getResource = `-- name: GetResource :one
SELECT resource.resource_uuid, content, resource_to_role.resource_uuid, role_uuid FROM resource
JOIN resource_to_role
ON resource_to_role.resource_uuid = resource.resource_uuid
WHERE resource.resource_uuid = $1
`

type GetResourceRow struct {
	ResourceUuid   uuid.UUID `json:"resource_uuid"`
	Content        string    `json:"content"`
	ResourceUuid_2 uuid.UUID `json:"resource_uuid_2"`
	RoleUuid       uuid.UUID `json:"role_uuid"`
}

func (q *Queries) GetResource(ctx context.Context, resourceUuid uuid.UUID) (GetResourceRow, error) {
	row := q.db.QueryRow(ctx, getResource, resourceUuid)
	var i GetResourceRow
	err := row.Scan(
		&i.ResourceUuid,
		&i.Content,
		&i.ResourceUuid_2,
		&i.RoleUuid,
	)
	return i, err
}
